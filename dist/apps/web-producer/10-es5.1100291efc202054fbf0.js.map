{"version":3,"sources":["webpack:///src/app/features/quoting/components/home/components/coverage/listcoverage/listcoverage.component.html","webpack:///src/app/features/quoting/components/home/components/coverage/listcoverage/listcoverage.component.ts","webpack:///src/app/features/quoting/components/home/components/coverage/blockcoverage/blockcoverage.component.html","webpack:///src/app/features/quoting/components/home/components/coverage/blockcoverage/blockcoverage.component.ts","webpack:///src/app/features/quoting/components/home/components/coverage/coverage.component.html","webpack:///src/app/features/quoting/components/home/components/coverage/coverage.component.ts","webpack:///src/app/features/quoting/components/home/components/coverage/coverage-routing.module.ts","webpack:///src/app/features/quoting/components/home/components/coverage/coverage.module.ts"],"names":["value","HomeListCoverageComponent","fb","storeQuote","storePolicy","amountService","listItems","msgIncendio","EventEmitter","showOthersStatus","showPremiumsStatus","checkUncheckCoverage","listCheckUncheckCoverage","form","formArrayBlockOne","FormArray","formArrayBlockTwo","formArrayBlockThree","blkTypeCoverages","showOthersCoveragesValue","showPremiumsCoveragesValue","quoteHomeSubscription","Subscription","currentHome","houses","housesDefault","currentHouse","currentHouseDefaultValues","callCosts$","BehaviorSubject","callCostsSubscription","allowCost","homeAssistance","_loadingAdditional","_isAllLoad","allSums","sumSuggestSubscription","this","moneyMask","prefix","thousandsSeparatorSymbol","array","Validators","required","FormGroup","coveragesBenefits","coveragesOthers","coveragesPremiums","select","pipe","tap","data","length","createFormArray","setMinMax","subscribe","combineLatest","assistance","homeData","activeHome","find","h","id","debounceTime","val","setChecksValuesInStore","emit","controlBenefits","get","controlOthers","controlPremium","forEach","lt","controlTemp","controls","control","code","pattern","setValueControl","showMinMax","terms","min","max","suggestedSum","suggestedToMinOrMax","setValue","onlySelf","emitEvent","setValidators","updateValueAndValidity","dataCoverage","active","chk","description","suggested","categoryBlock","category","block","categoryCode","visible","editable","inherit","child","listSum","listCoverageBenefits","listCoverageOthers","listCoveragePremiums","clear","ls","BENEFITS","push","fillArrayCoverage","PREMIUM","createFormGroupCoverages","listSumBenefits","listSumOthers","listSumPremums","map","item","createForms","controlMedic","at","findIndex","fi","disable","coverage","FormControl","chkIE","ic","chkIC","chkAP","chkAPD","enable","activeAllGastosMedicos","event","c","target","checkIncendio","setControlValueDefault","checked","setListCheckUncheckCoverage","next","checkGastosMedicos","blockCovMedico","bm","packages","cp","covTemp","coverages","termsMed","current","options","toString","currentControl","ctl","addCoverageToCurrentHouse","dispatch","pckValueDefault","pa","isCov","cv","searchInherit","codesInheritable","ci","childs","sc","covChild","lc","tmpTerm","valid","getAmounts","type","zone","city","postalcode","amounts","sumIncendioProrrata","sumRemocionEscombros","sumGastosHospedaje","ltRemocionEscombros","ltGastosHospedaje","valueTempRemocion","tmpChild","tmpRemocion","tmpChildHospedaje","tmpHospedaje","valueTempHospedaje","unsubscribe","loadingAdditionals","isAllLoad","HomeBlockCoverageComponent","super","showOthersCoverages","showPremiumsCoverages","availableCoveragesBenefits","availableCoveragesPremium","availableCoveragesOthers","policy","pckCoverageDefault","coverageDefault","currentPckCov","pc","number","pg","mergeCoverages","codesBenefitsCoverages","codesPlanPremiumsCoverages","coverageBenefitsPremium","concat","home","dwellings","fullList","partialList","allowCodes","others","includes","proccessCoverage","coverageAvailable","available","codesExcludeCoverages","defaultReturn","BaseComponent","HomeCoverageComponent","HomeCoverageRoutingModule","HomeCoverageModule","routes","path","component","coveragesAdapter","additionalService","comissionService","discountService","periodsMethodService","paymentMethodService","paymentPlansService","producerStore","quotingService","policyAdapter","defaultAssistanceService","policySubscription","loadingList","listCoverages","listSumSuggests","sumSuggestedSubscription","showMessageIncendio","defaultDiscount","payment","currentProducer","resultCosts$","costsResponseSubscription","loadingCost","getCosts$","Subject","costsSubscription","isFormValid","currentCost","costsQuoteSubscription","lottieConfig","paymentTermSubscription","paymentTerm","defaultAssistance","dat","housePolicy","sumSuggest","homeActive","homeRoutes","loadDefaultValues","response","switchMap","getCosts","adaptHome","costs","checkCall","callCost","reqComisions","job","defaultValues$","getAllDiscounts","getAllComissions","getAllPeriodMethods","getAllPaymentMethods","getDefaultAssistance","profile","channel","discount","commission","period","paymentMethod","loadAdditionals","callCoveragePackage","defaultCommission","creditCardOption","filter","x","toLowerCase","method","paymentPlan$","getAllPaymentPlans","start","end","pm","pkg","cuotas","replace","trim","plan","of","adaptAdditionalHome","dw","getAdditionalAccessorios","ad","coverageAdditional","li","toCheckCode","assistanceHome","termsTemp","currentPck","priceInvoice","cost","externalId","split","productcode","invoice","forChild"],"mappings":"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","file":"x","sourcesContent":["<div class=\"row no-gutters home-list-coverage\">\n  <div class=\"col-lg-12\">\n    <!-- <div class=\"row no-gutters\" style=\"margin-bottom: 2.0625rem;\">\n      <div class=\"col-lg-12\" style=\"padding-left: 8.0625rem;\">\n        <div class=\"title\">Elegí el plan</div>\n        <div class=\"subtitle\">Coberturas incluídas</div>\n        <div class=\"gray-title\">\n          ¡Podes editarlas para armar tu plan a medida!\n        </div>\n      </div>\n    </div> -->\n    <div [formGroup]=\"form\">\n      <ng-container formArrayName=\"coveragesBenefits\">\n        <ul class=\"list-group\">\n          <ng-container\n            *ngFor=\"\n              let featureGroup of coveragesBenefits.controls;\n              let i = index\n            \"\n          >\n            <li\n              class=\"list-group-item item-benefits\"\n              [formGroup]=\"featureGroup\"\n              *ngIf=\"featureGroup.get('visible').value\"\n              [ngClass]=\"{\n                'item-resize-benefits': !featureGroup.get('chk').value\n              }\"\n            >\n              <div class=\"form-checkbox mb-0\">\n                <input\n                  type=\"checkbox\"\n                  formControlName=\"chk\"\n                  id=\"{{ featureGroup.get('code').value }}\"\n                  class=\"form-checkbox-input\"\n                  (change)=\"onClickCheckboxBenefits($event)\"\n                />\n                <label\n                  class=\"form-checkbox-label\"\n                  for=\"{{ featureGroup.get('code').value }}\"\n                >\n                  {{ featureGroup.get('description').value }}\n                </label>\n              </div>\n              <div class=\"row no-gutters\" *ngIf=\"featureGroup.get('chk').value\">\n                <div class=\"col-lg-8\">\n                  <sxf-textbox\n                    type=\"text\"\n                    formControlName=\"suggested\"\n                    style=\"display: inherit;\"\n                    [disabled]=\"!featureGroup.get('editable').value\"\n                    [mask]=\"moneyMask\"\n                    invalidFeedback=\"La suma asegurada no puede ser 0\"\n                    (keyup)=\"onChangeSum(featureGroup.get('code').value)\"\n                  ></sxf-textbox>\n                </div>\n                <div\n                  class=\"col-lg-4 min-max\"\n                  *ngIf=\"featureGroup.get('showMinMax').value\"\n                >\n                  <span style=\"display: block;\">\n                    Min {{ featureGroup.get('min').value | currencyFormat }}\n                  </span>\n                  <span>\n                    Máx {{ featureGroup.get('max').value | currencyFormat }} *\n                  </span>\n                </div>\n                <div\n                  class=\"item-static\"\n                  *ngIf=\"featureGroup.get('inherit').value\"\n                >\n                  <div\n                    *ngFor=\"let child of featureGroup.get('child').value\"\n                    style=\"margin-bottom: 0.5rem;\"\n                  >\n                    + {{ child.suggested | currencyFormat }} por\n                    {{ child.description }}\n                  </div>\n                </div>\n              </div>\n            </li>\n          </ng-container>\n        </ul>\n      </ng-container>\n\n      <ng-container formArrayName=\"coveragesOthers\">\n        <div style=\"margin: 2rem 0 1.5rem 8.0625rem;\">\n          <span class=\"subtitle\">\n            Otras coberturas\n            <i\n              class=\"arrow-char down\"\n              (click)=\"showOthersCoverages()\"\n              *ngIf=\"!showOthersCoveragesValue\"\n            ></i>\n            <i\n              class=\"arrow-char up\"\n              (click)=\"showOthersCoverages()\"\n              *ngIf=\"showOthersCoveragesValue\"\n            ></i>\n          </span>\n        </div>\n        <ul class=\"list-group\" *ngIf=\"showOthersCoveragesValue\">\n          <ng-container\n            *ngFor=\"let featureGroup of coveragesOthers.controls; let i = index\"\n          >\n            <li\n              class=\"list-group-item\"\n              [formGroup]=\"featureGroup\"\n              *ngIf=\"featureGroup.get('visible').value\"\n              [ngClass]=\"{\n                'item-resize-others': !featureGroup.get('chk').value\n              }\"\n            >\n              <div class=\"form-checkbox mb-0\">\n                <input\n                  type=\"checkbox\"\n                  formControlName=\"chk\"\n                  id=\"{{ featureGroup.get('code').value }}\"\n                  class=\"form-checkbox-input\"\n                  (change)=\"onClickCheckboxOthers($event)\"\n                />\n                <label\n                  class=\"form-checkbox-label\"\n                  for=\"{{ featureGroup.get('code').value }}\"\n                  [ngClass]=\"{ disabled: !featureGroup.get('editable').value }\"\n                >\n                  {{ featureGroup.get('description').value }}\n                </label>\n              </div>\n              <div class=\"row no-gutters\" *ngIf=\"featureGroup.get('chk').value\">\n                <div class=\"col-lg-8\">\n                  <sxf-textbox\n                    type=\"text\"\n                    formControlName=\"suggested\"\n                    style=\"display: inherit;\"\n                    [disabled]=\"!featureGroup.get('editable').value\"\n                    [mask]=\"moneyMask\"\n                    invalidFeedback=\"La suma asegurada no puede ser 0\"\n                    (keyup)=\"onChangeSum(featureGroup.get('code').value)\"\n                  ></sxf-textbox>\n                </div>\n                <div\n                  class=\"col-lg-4 min-max\"\n                  *ngIf=\"featureGroup.get('showMinMax').value\"\n                >\n                  <span style=\"display: block;\">\n                    Min {{ featureGroup.get('min').value | currencyFormat }}\n                  </span>\n                  <span>\n                    Máx {{ featureGroup.get('max').value | currencyFormat }} *\n                  </span>\n                </div>\n              </div>\n            </li>\n          </ng-container>\n        </ul>\n      </ng-container>\n\n      <ng-container formArrayName=\"coveragesPremiums\">\n        <div style=\"margin: 2rem 0 1.5rem 8.0625rem;\">\n          <span class=\"subtitle\">\n            Beneficios exclusivos Plan Premium\n            <i\n              class=\"arrow-char down\"\n              (click)=\"showPremiumsCoverages()\"\n              *ngIf=\"!showPremiumsCoveragesValue\"\n            ></i>\n            <i\n              class=\"arrow-char up\"\n              (click)=\"showPremiumsCoverages()\"\n              *ngIf=\"showPremiumsCoveragesValue\"\n            ></i>\n          </span>\n        </div>\n        <ul class=\"list-group\" *ngIf=\"showPremiumsCoveragesValue\">\n          <ng-container\n            *ngFor=\"\n              let featureGroup of coveragesPremiums.controls;\n              let i = index\n            \"\n          >\n            <li\n              class=\"list-group-item item-resize-premiums\"\n              [formGroup]=\"featureGroup\"\n              *ngIf=\"featureGroup.get('visible').value\"\n            >\n              {{ featureGroup.get('suggested').value | currencyFormat }} por\n              {{ featureGroup.get('description').value }}\n            </li>\n          </ng-container>\n        </ul>\n      </ng-container>\n    </div>\n    <div class=\"info\">\n      * Al superar los límites máximos se necesitará la aprobación de la\n      compañía\n    </div>\n  </div>\n</div>\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  Input,\n  EventEmitter,\n  Output\n} from '@angular/core';\nimport {\n  FormBuilder,\n  Validators,\n  FormGroup,\n  FormArray,\n  FormControl,\n  AbstractControl\n} from '@angular/forms';\nimport createNumberMask from 'text-mask-addons/dist/createNumberMask';\n\nimport {\n  IHomeCoverages,\n  IHouse,\n  IAmounts,\n  AmountsService\n} from '@sura-platform/features';\nimport { blockTypeCoverages } from '../listcoverages.enum';\nimport { Store } from '@ngrx/store';\nimport * as fromQuote from '../../../../quote/state';\nimport { Subscription, combineLatest, BehaviorSubject } from 'rxjs';\nimport * as fromPolicy from '../../../../../state/policy';\nimport { ITerm, ICoverage } from '@sura-platform/features/coverage';\nimport * as fromPolicyActions from '../../../../../state/policy/policy.actions';\nimport { tap, debounceTime } from 'rxjs/operators';\nimport { HOME_CONF } from '../../../home.config';\n\n@Component({\n  selector: 'sxf-homelistcoverage',\n  templateUrl: 'listcoverage.component.html',\n  styleUrls: ['listcoverage.component.scss']\n})\nexport class HomeListCoverageComponent implements OnInit, OnDestroy {\n  @Input() public listItems: IHomeCoverages[] = [];\n\n  @Output()\n  msgIncendio = new EventEmitter<boolean>();\n\n  /**\n   * Emit if collapse Others block\n   *\n   * @memberof HomeListCoverageComponent\n   */\n  @Output() showOthersStatus = new EventEmitter<boolean>(false);\n\n  /**\n   * Emit if collapse Premiums block\n   *\n   * @memberof HomeListCoverageComponent\n   */\n  @Output() showPremiumsStatus = new EventEmitter<boolean>(false);\n\n  /**\n   * Emit check uncheck checkbox\n   *\n   * @memberof HomeListCoverageComponent\n   */\n  @Output() checkUncheckCoverage = new EventEmitter<any[]>(false);\n\n  listCheckUncheckCoverage: any[] = [];\n\n  /**\n   * variable for formgroup\n   */\n  form: FormGroup = <FormGroup>{};\n\n  formArrayBlockOne: FormArray = new FormArray([]);\n\n  formArrayBlockTwo: FormArray = new FormArray([]);\n\n  formArrayBlockThree: FormArray = new FormArray([]);\n\n  /**\n   * For use blockTypeCoverages enum on template\n   *\n   * @memberof HomeListCoverageComponent\n   */\n  blkTypeCoverages = blockTypeCoverages;\n\n  /**\n   * True show Others Coverages items\n   * False not show Others Coverages items\n   *\n   * @memberof HomeListCoverageComponent\n   */\n  showOthersCoveragesValue = false;\n\n  /**\n   * True show Premiums Coverage items\n   * False not show Premiums Coverage items\n   *\n   * @memberof HomeListCoverageComponent\n   */\n  showPremiumsCoveragesValue = false;\n\n  /**\n   * Configure mask to textinput money\n   *\n   * @type {*}\n   * @memberof HomeListCoverageComponent\n   */\n  moneyMask: any;\n\n  controlMedic: any;\n\n  quoteHomeSubscription: Subscription = new Subscription();\n\n  /**\n   * Current house number\n   */\n  currentHome: number | null = 0;\n\n  /**\n   * All houses\n   */\n  houses: IHouse[] = <IHouse[]>{};\n\n  /**\n   * All houses default by check and no check\n   */\n  housesDefault: IHouse[] = <IHouse[]>{};\n\n  /**\n   * Current House of houses vector\n   */\n  currentHouse: IHouse = <IHouse>{};\n\n  /**\n   * Current currentHouseDefaultValues of houses vector in quote\n   */\n  currentHouseDefaultValues: IHouse = <IHouse>{};\n\n  callCosts$ = new BehaviorSubject<boolean>(false);\n\n  callCostsSubscription: Subscription = new Subscription();\n\n  @Output() allowCost = new EventEmitter(false);\n\n  homeAssistance: ICoverage = <ICoverage>{};\n\n  _loadingAdditional: boolean | undefined = undefined;\n\n  _isAllLoad: boolean | undefined = undefined;\n\n  allSums: IAmounts = <IAmounts>{};\n\n  sumSuggestSubscription: Subscription = new Subscription();\n\n  constructor(\n    private fb: FormBuilder,\n    private storeQuote: Store<fromQuote.State>,\n    private storePolicy: Store<fromPolicy.State>,\n    private amountService: AmountsService\n  ) {}\n\n  @Input()\n  public set loadingAdditionals(loadingAdditionals: boolean) {\n    this._loadingAdditional = loadingAdditionals;\n    if (!loadingAdditionals && this.isAllLoad) {\n      //al estar todos los formarray creados\n      //reviso los checks, para llamada a costs\n      this.callCosts$.next(true);\n    }\n  }\n\n  public get loadingAdditionals(): boolean {\n    return <boolean>this._loadingAdditional;\n  }\n\n  @Input()\n  public set isAllLoad(isAllLoad: boolean) {\n    this._isAllLoad = isAllLoad;\n    if (isAllLoad && !this.loadingAdditionals) {\n      //al estar todos los formarray creados\n      //reviso los checks, para llamada a costs\n      this.callCosts$.next(true);\n    }\n  }\n\n  public get isAllLoad(): boolean {\n    return <boolean>this._isAllLoad;\n  }\n\n  ngOnInit() {\n    this.moneyMask = createNumberMask({\n      prefix: '$ ',\n      thousandsSeparatorSymbol: '.'\n    });\n    this.formArrayBlockOne = this.fb.array([], [Validators.required]);\n    this.formArrayBlockTwo = this.fb.array([], [Validators.required]);\n    this.formArrayBlockThree = this.fb.array([], [Validators.required]);\n\n    this.form = new FormGroup({\n      coveragesBenefits: this.formArrayBlockOne,\n      coveragesOthers: this.formArrayBlockTwo,\n      coveragesPremiums: this.formArrayBlockThree\n    });\n\n    this.sumSuggestSubscription = this.storeQuote\n      .select(fromQuote.getsuggestedSums)\n      .pipe(\n        tap((data: any) => {\n          this.allSums = data;\n          if (data && this.coveragesBenefits.value.length === 0) {\n            this.createFormArray(this.listItems);\n          } else {\n            //actualizo datos min y max\n            this.setMinMax();\n          }\n        })\n      )\n      .subscribe();\n\n    this.quoteHomeSubscription = combineLatest([\n      this.storePolicy.select(fromQuote.getQuoteHomeData),\n      this.storeQuote.select(fromPolicy.getHouses),\n      this.storePolicy.select(fromQuote.getCoverageDefault),\n      this.storePolicy.select(fromQuote.getHomeAssistance)\n    ]).subscribe(([homeData, houses, housesDefault, assistance]) => {\n      this.currentHome = homeData.activeHome;\n      this.housesDefault = <IHouse[]>housesDefault;\n      this.houses = houses;\n      this.homeAssistance = <ICoverage>assistance;\n      this.currentHouse = <IHouse>(\n        this.houses.find((h) => h.id === this.currentHome)\n      );\n      this.currentHouseDefaultValues = <IHouse>(\n        this.housesDefault.find((h) => h.id === this.currentHome)\n      );\n    });\n\n    this.callCostsSubscription = this.callCosts$\n      .pipe(\n        debounceTime(1000),\n        //distinctUntilChanged(),\n        tap((val) => {\n          if (val) {\n            this.setChecksValuesInStore();\n          }\n        })\n      )\n      .subscribe((val) => {\n        if (val) {\n          this.allowCost.emit(true);\n        }\n      });\n  }\n\n  setMinMax() {\n    const controlBenefits = this.form.get('coveragesBenefits') as FormArray;\n    const controlOthers = this.form.get('coveragesOthers') as FormArray;\n    const controlPremium = this.form.get('coveragesPremiums') as FormArray;\n    this.listItems.forEach((lt) => {\n      let controlTemp = controlBenefits?.controls.find(\n        (control: any) => control.value.code === lt.pattern.code\n      );\n      this.setValueControl(controlTemp, lt);\n\n      controlTemp = controlOthers?.controls.find(\n        (control: any) => control.value.code === lt.pattern.code\n      );\n      this.setValueControl(controlTemp, lt);\n\n      controlTemp = controlPremium?.controls.find(\n        (control: any) => control.value.code === lt.pattern.code\n      );\n      this.setValueControl(controlTemp, lt);\n    });\n  }\n\n  setValueControl(controlTemp: any, lt: any) {\n    if (controlTemp) {\n      const showMinMax =\n        lt.terms[0].value.min === null && lt.terms[0].value.max === null\n          ? false\n          : true;\n\n      // Según US 8316 si la suma sugerida es menor al min entonces debe ser min\n      // si la suma sugerida es mayor a max entonces debe ser max\n      const suggestedSum = this.suggestedToMinOrMax(\n        controlTemp.get('suggested').value,\n        lt.terms[0].value.min,\n        lt.terms[0].value.max,\n        showMinMax\n      );\n\n      controlTemp.get('min').setValue(lt.terms[0].value.min);\n      controlTemp.get('max').setValue(lt.terms[0].value.max);\n      controlTemp.get('showMinMax').setValue(showMinMax);\n      controlTemp\n        .get('suggested')\n        .setValue(suggestedSum, { onlySelf: true, emitEvent: false });\n\n      if (showMinMax) {\n        controlTemp\n          ?.get('suggested')\n          ?.setValidators([\n            Validators.min(lt.terms[0].value.min),\n            Validators.max(lt.terms[0].value.max),\n            Validators.pattern(/^((?!(0))[0-9].*)$/),\n            Validators.required\n          ]);\n      } else {\n        controlTemp\n          ?.get('suggested')\n          ?.setValidators([\n            Validators.pattern(/^((?!(0))[0-9].*)$/),\n            Validators.required\n          ]);\n      }\n      controlTemp?.get('suggested')?.updateValueAndValidity();\n    }\n  }\n\n  get coveragesBenefits(): FormArray {\n    return this.form.get('coveragesBenefits') as FormArray;\n  }\n\n  get coveragesOthers(): FormArray {\n    return this.form.get('coveragesOthers') as FormArray;\n  }\n\n  get coveragesPremiums(): FormArray {\n    return this.form.get('coveragesPremiums') as FormArray;\n  }\n\n  fillArrayCoverage(dataCoverage: any, active: boolean) {\n    return {\n      chk: active,\n      code: dataCoverage.pattern.code,\n      description: dataCoverage.pattern.description,\n      suggested: dataCoverage.terms[0].value.suggested,\n      categoryBlock: dataCoverage.category.block,\n      categoryCode: dataCoverage.category.code,\n      visible: dataCoverage.category.visible,\n      editable: dataCoverage.category.editable,\n      inherit: dataCoverage.inherit,\n      child: dataCoverage.inherit ? dataCoverage.child : null,\n      min: dataCoverage.terms[0].value.min\n        ? dataCoverage.terms[0].value.min\n        : null,\n      max: dataCoverage.terms[0].value.max\n        ? dataCoverage.terms[0].value.max\n        : null\n    };\n  }\n\n  createFormArray(listSum: IHomeCoverages[]) {\n    const listCoverageBenefits: any = [];\n    const listCoverageOthers: any = [];\n    const listCoveragePremiums: any = [];\n    this.formArrayBlockOne.clear();\n    this.formArrayBlockTwo.clear();\n    this.formArrayBlockThree.clear();\n    listSum.forEach((ls) => {\n      if (ls.category.block === blockTypeCoverages.BENEFITS) {\n        //true, quiere decir que por default\n        //estaran activas todas estas coberturas\n        listCoverageBenefits.push(this.fillArrayCoverage(ls, true));\n      } else if (ls.category.block === blockTypeCoverages.PREMIUM) {\n        listCoveragePremiums.push(this.fillArrayCoverage(ls, true));\n      } else {\n        listCoverageOthers.push(this.fillArrayCoverage(ls, false));\n      }\n    });\n    this.createFormGroupCoverages(\n      listCoverageBenefits,\n      listCoverageOthers,\n      listCoveragePremiums\n    );\n  }\n\n  createFormGroupCoverages(\n    listSumBenefits: IHomeCoverages[],\n    listSumOthers: IHomeCoverages[],\n    listSumPremums: IHomeCoverages[]\n  ) {\n    listSumBenefits.map((item: IHomeCoverages) => {\n      this.formArrayBlockOne.push(this.createForms(item));\n    });\n\n    listSumOthers.map((item: IHomeCoverages) => {\n      this.formArrayBlockTwo.push(this.createForms(item));\n    });\n\n    //desactivando gastos medicos por defecto segun US7912\n    const controlOthers = this.form.get('coveragesOthers') as FormArray;\n    this.controlMedic = controlOthers?.at(\n      this.form\n        ?.get('coveragesOthers')\n        ?.value.findIndex((fi: any) => fi.code === 'SURA_HOE_GastosMedicosCov')\n    );\n\n    this.controlMedic.disable();\n\n    listSumPremums.map((item: IHomeCoverages) => {\n      this.formArrayBlockThree.push(this.createForms(item));\n    });\n  }\n\n  createForms(coverage: any): FormGroup {\n    const formGroup: FormGroup = new FormGroup({\n      chk: new FormControl(coverage.chk),\n      code: new FormControl(coverage.code),\n      description: new FormControl(coverage.description),\n      suggested: new FormControl(coverage.suggested),\n      categoryBlock: new FormControl(coverage.categoryBlock),\n      categoryCode: new FormControl(coverage.categoryCode),\n      editable: new FormControl(coverage.editable),\n      visible: new FormControl(coverage.visible),\n      inherit: new FormControl(coverage.inherit),\n      child: new FormControl(coverage.child),\n      min: new FormControl(coverage.min),\n      max: new FormControl(coverage.max),\n      // Se coloca true por defecto ya que en la primera carga no vienen valores de min y max\n      // de esta manera se muestran min y max en 0 hasta que se carguen los valores desde\n      // additionals\n      showMinMax: new FormControl(true)\n    });\n    return formGroup;\n  }\n\n  showOthersCoverages() {\n    this.showOthersCoveragesValue = !this.showOthersCoveragesValue;\n    this.showOthersStatus.emit(this.showOthersCoveragesValue);\n  }\n\n  showPremiumsCoverages() {\n    this.showPremiumsCoveragesValue = !this.showPremiumsCoveragesValue;\n    this.showPremiumsStatus.emit(this.showPremiumsCoveragesValue);\n  }\n\n  checkIncendio() {\n    //validacion de US-7912\n    const chkIE = this.form.value.coveragesBenefits.find(\n      (ic: any) => ic.code === 'SURA_HOE_IncendioEdiCov'\n    );\n    const chkIC = this.form.value.coveragesBenefits.find(\n      (ic: any) => ic.code === 'SURA_HOE_IncendioConPRCov'\n    );\n    !chkIE.chk && !chkIC.chk\n      ? this.msgIncendio.emit(true)\n      : this.msgIncendio.emit(false);\n  }\n\n  checkGastosMedicos(control: any) {\n    let activeGastosMedicos = false;\n    if (\n      control.value.code === 'SURA_HOE_AccidentesPerCov' ||\n      control.value.code === 'SURA_HOE_AccidentesPerDCov'\n    ) {\n      const chkAP = this.form.value.coveragesOthers.find(\n        (ic: any) => ic.code === 'SURA_HOE_AccidentesPerCov'\n      );\n\n      const chkAPD = this.form.value.coveragesOthers.find(\n        (ic: any) => ic.code === 'SURA_HOE_AccidentesPerDCov'\n      );\n\n      chkAP.chk || chkAPD.chk\n        ? (activeGastosMedicos = true)\n        : (activeGastosMedicos = false);\n\n      if (activeGastosMedicos) {\n        this.controlMedic.get('editable').setValue(true);\n        this.controlMedic.enable();\n      } else {\n        this.controlMedic.get('editable').setValue(false);\n        this.controlMedic.get('chk').setValue(false);\n        this.activeAllGastosMedicos();\n        this.controlMedic.disable();\n      }\n    }\n  }\n\n  onClickCheckboxBenefits(event: any) {\n    const control: any = (this.form.get(\n      'coveragesBenefits'\n    ) as FormArray).controls.find(\n      (c) => c?.get('code')?.value === event.target.id\n    );\n    this.checkIncendio();\n    this.setControlValueDefault(event.target.checked, control);\n\n    this.setListCheckUncheckCoverage(control);\n    this.callCosts$.next(true);\n  }\n\n  onClickCheckboxOthers(event: any) {\n    const control: any = (this.form.get(\n      'coveragesOthers'\n    ) as FormArray).controls.find(\n      (c) => c?.get('code')?.value === event.target.id\n    );\n\n    this.setControlValueDefault(event.target.checked, control);\n\n    this.checkGastosMedicos(control);\n\n    if (control.value.code === 'SURA_HOE_GastosMedicosCov') {\n      this.activeAllGastosMedicos();\n    }\n\n    this.setListCheckUncheckCoverage(control);\n    this.callCosts$.next(true);\n  }\n\n  activeAllGastosMedicos() {\n    const chkGM = this.form.value.coveragesOthers.find(\n      (ic: any) => ic.code === 'SURA_HOE_GastosMedicosCov'\n    );\n    if (chkGM.chk) {\n      //activaron gastos medicos\n      const blockCovMedico = this.listItems.find(\n        (bm) => bm.pattern.code === 'SURA_HOE_GastosMedicosCov'\n      );\n\n      this.currentHouseDefaultValues?.packages?.forEach((cp) => {\n        if (cp.code === 'premium' || cp.code === 'basic') {\n          const covTemp = cp.coverages;\n          const termsMed: ITerm[] = [];\n          termsMed.push({\n            code: <string>blockCovMedico?.terms[0]?.code,\n            value: {\n              current: <string>blockCovMedico?.terms[0]?.value?.suggested\n            },\n            options: null\n          });\n          covTemp?.push({\n            pattern: {\n              code: <string>blockCovMedico?.pattern?.code,\n              description: <string>blockCovMedico?.pattern?.description\n            },\n            terms: termsMed\n          });\n          cp.coverages = covTemp;\n        }\n      });\n      // this.storePolicy.dispatch(\n      //   new fromQuoteActions.SetDefaultCoverageByPckAction(this.housesDefault)\n      // );\n    } /* else {\n      this.currentHouseDefaultValues?.packages?.forEach((cp) => {\n        const covTemp = cp?.coverages?.filter(\n          (ct) => ct.pattern.code !== 'SURA_HOE_GastosMedicosCov'\n        );\n        if (covTemp) {\n          cp.coverages = covTemp;\n        }\n      });\n      // this.storePolicy.dispatch(\n      //   new fromQuoteActions.SetDefaultCoverageByPckAction(this.housesDefault)\n      // );\n    }*/\n  }\n\n  setControlValueDefault(checked: boolean, control: AbstractControl) {\n    if (checked) {\n      let suggestedSum = this.listItems?.find(\n        (item: any) => control?.get('code')?.value === item.pattern.code\n      )?.terms[0]?.value?.suggested;\n\n      // Según US 8316 si la suma sugerida es menor al min entonces debe ser min\n      // si la suma sugerida es mayor a max entonces debe ser max\n      suggestedSum = this.suggestedToMinOrMax(\n        <number>(<unknown>suggestedSum),\n        control?.get('min')?.value,\n        control?.get('max')?.value,\n        control?.get('showMinMax')?.value\n      ).toString();\n\n      control\n        ?.get('suggested')\n        ?.setValue(suggestedSum, { onlySelf: true, emitEvent: false });\n    } else {\n      control\n        ?.get('suggested')\n        ?.setValue('0', { onlySelf: true, emitEvent: false });\n    }\n  }\n\n  setListCheckUncheckCoverage(control: AbstractControl) {\n    const currentControl = this.listCheckUncheckCoverage.find(\n      (ctl: any) => ctl.code === control?.get('code')?.value\n    );\n\n    if (currentControl) {\n      currentControl.checked = control?.get('chk')?.value;\n    } else {\n      this.listCheckUncheckCoverage.push({\n        code: control?.get('code')?.value,\n        checked: control?.get('chk')?.value\n      });\n    }\n\n    // Emite si un checkbox fue marcado/desmarcado.\n    // En principio esto servirá para dar uniformidad\n    // a los estilos entre listCoverages y blockCoverages\n    this.checkUncheckCoverage.emit(this.listCheckUncheckCoverage);\n  }\n\n  /**\n   * Setear coverage para llamada de costs\n   */\n  setChecksValuesInStore() {\n    //limpio los coverages de cada pck\n    //para poner los coverages que solo estan check = true\n    this.currentHouse?.packages?.forEach((cp) => {\n      cp.coverages = [];\n      if (this.homeAssistance) {\n        cp.coverages.push(this.homeAssistance);\n      }\n\n      //borro todos los coverages, dejo solo asistencia de hogar que siempre va\n    });\n\n    const controlBenefits = this.form.get('coveragesBenefits') as FormArray;\n    const controlOthers = this.form.get('coveragesOthers') as FormArray;\n    const controlPremium = this.form.get('coveragesPremiums') as FormArray;\n\n    //itero sobre cada item..\n    this.listItems.forEach((lt) => {\n      let controlTemp = controlBenefits?.controls.find(\n        (control: any) => control.value.code === lt.pattern.code\n      );\n\n      if (controlTemp) {\n        //si esta check, va a coverage de policy\n        //si pertenece a los default..sino no\n        this.addCoverageToCurrentHouse(controlTemp, lt);\n      }\n\n      controlTemp = controlOthers?.controls.find(\n        (control: any) => control.value.code === lt.pattern.code\n      );\n\n      if (controlTemp) {\n        this.addCoverageToCurrentHouse(controlTemp, lt);\n      }\n\n      controlTemp = controlPremium?.controls.find(\n        (control: any) => control.value.code === lt.pattern.code\n      );\n\n      if (controlTemp) {\n        this.addCoverageToCurrentHouse(controlTemp, lt);\n      }\n    });\n    this.storePolicy.dispatch(\n      new fromPolicyActions.UpdateHouseAction(this.houses)\n    );\n  }\n\n  addCoverageToCurrentHouse(controlTemp: any, lt: any) {\n    this.currentHouse?.packages?.forEach((cp) => {\n      const pckValueDefault = this.currentHouseDefaultValues?.packages?.find(\n        (pa) => pa.code === cp.code\n      )?.coverages;\n\n      const isCov = pckValueDefault?.find(\n        (cv) => cv.pattern.code === lt.pattern.code\n      );\n      //si esta check, y ademas la cobertura es posible\n      //en este paquete se agrega\n      if (isCov && controlTemp.get('chk')?.value) {\n        isCov.terms[0].value.current = controlTemp.get('suggested')?.value;\n\n        cp?.coverages?.push(isCov);\n\n        //reviso si tiene coberturas hijas\n        const searchInherit = HOME_CONF.codesInheritable.find(\n          (ci) => ci.code === lt.pattern.code\n        );\n        if (searchInherit) {\n          searchInherit.childs.forEach((sc) => {\n            const covChild = this.allSums.coverages.find(\n              (lc) => lc.pattern.code === sc\n            );\n            if (covChild) {\n              const tmpTerm: ITerm[] = [];\n              tmpTerm.push({\n                code: covChild.terms[0].code,\n                value: {\n                  current: <string>covChild.terms[0].value.suggested\n                },\n                options: null\n              });\n              const covTemp: ICoverage = {\n                pattern: covChild.pattern,\n                terms: tmpTerm\n              };\n              cp?.coverages?.push(covTemp);\n            }\n          });\n        }\n      }\n    });\n  }\n\n  onChangeSum(code: string) {\n    const controlBenefits = (this.form.get(\n      'coveragesBenefits'\n    ) as FormArray).controls.find((c) => c?.get('code')?.value === code);\n\n    const controlOthers = (this.form.get(\n      'coveragesOthers'\n    ) as FormArray).controls.find((c) => c?.get('code')?.value === code);\n\n    if (\n      (controlBenefits && controlBenefits.valid) ||\n      (controlOthers && controlOthers.valid)\n    ) {\n      // si cambió el valor de Incendio Edificio a Prorrata entonces\n      // se llama a amounts para obtener los recálculos para las coberturas\n      // dependientes\n      if (\n        controlBenefits &&\n        controlBenefits?.get('code')?.value === 'SURA_HOE_IncendioEdiCov'\n      ) {\n        this.amountService\n          .getAmounts(\n            this.currentHouse.type as string,\n            undefined,\n            this.currentHouse.zone.city as string,\n            `${this.currentHouse.zone.postalcode}`,\n            controlBenefits?.get('suggested')?.value\n          )\n          .subscribe((amounts: any) => {\n            // Se sacan las sumas de amounts\n            const sumIncendioProrrata = amounts.coverages.find(\n              (lt: any) => lt.pattern.code === 'SURA_HOE_IncendioEdiCov'\n            );\n            const sumRemocionEscombros = amounts.coverages.find(\n              (lt: any) => lt.pattern.code === 'SURA_HOE_RemocionEscCov'\n            );\n            const sumGastosHospedaje = amounts.coverages.find(\n              (lt: any) => lt.pattern.code === 'SURA_HOE_GastosHosCov'\n            );\n\n            // Se sacan los items a modificar en listItems\n            const ltRemocionEscombros = this.listItems.find(\n              (lt: any) => lt.pattern.code === 'SURA_HOE_RemocionEscCov'\n            );\n            const ltGastosHospedaje = this.listItems.find(\n              (lt: any) => lt.pattern.code === 'SURA_HOE_GastosHosCov'\n            );\n\n            // Se actualizan los controles e items\n            controlBenefits\n              ?.get('suggested')\n              ?.setValue(sumIncendioProrrata.terms[0].value.suggested, {\n                onlySelf: true,\n                emitEvent: false\n              });\n            if (\n              ltRemocionEscombros?.terms[0]?.value?.suggested &&\n              ltGastosHospedaje?.terms[0]?.value?.suggested\n            ) {\n              const valueTempRemocion =\n                sumRemocionEscombros?.terms[0]?.value?.suggested;\n              const tmpChild = controlBenefits.get('child')?.value[0];\n              const tmpRemocion = ltRemocionEscombros?.terms[0]?.value;\n\n              tmpChild.suggested = valueTempRemocion;\n              tmpRemocion.suggested = valueTempRemocion;\n\n              const tmpChildHospedaje = controlBenefits.get('child')?.value[1];\n              const tmpHospedaje = ltGastosHospedaje?.terms[0]?.value;\n              const valueTempHospedaje =\n                sumGastosHospedaje?.terms[0]?.value?.suggested;\n\n              tmpChildHospedaje.suggested = valueTempHospedaje;\n              tmpHospedaje.suggested = valueTempHospedaje;\n            }\n\n            (this.form.get('coveragesOthers') as FormArray)?.controls\n              ?.find((c) => c?.get('code')?.value === 'SURA_HOE_RemocionEscCov')\n              ?.get('suggested')\n              ?.setValue(sumRemocionEscombros.terms[0].value.suggested, {\n                onlySelf: true,\n                emitEvent: false\n              });\n\n            (this.form.get('coveragesOthers') as FormArray)?.controls\n              ?.find((c) => c?.get('code')?.value === 'SURA_HOE_GastosHosCov')\n              ?.get('suggested')\n              ?.setValue(sumGastosHospedaje.terms[0].value.suggested, {\n                onlySelf: true,\n                emitEvent: false\n              });\n            this.callCosts$.next(true);\n          });\n      } else {\n        this.callCosts$.next(true);\n      }\n    }\n  }\n\n  /**\n   * Change suggested sum to min if less than min\n   * Change suggested sum to max if greater than max\n   *\n   * Based on US 8316\n   *\n   * @param {number} suggestedSum\n   * @param {number} min\n   * @param {number} max\n   * @param {boolean} showMinMax\n   * @memberof HomeListCoverageComponent\n   */\n  suggestedToMinOrMax(\n    suggestedSum: number,\n    min: number,\n    max: number,\n    showMinMax: boolean\n  ) {\n    if (showMinMax && suggestedSum < min) {\n      suggestedSum = min;\n    } else if (showMinMax && suggestedSum > max) {\n      suggestedSum = max;\n    }\n\n    return suggestedSum;\n  }\n\n  ngOnDestroy() {\n    if (this.quoteHomeSubscription) this.quoteHomeSubscription.unsubscribe();\n    if (this.callCostsSubscription) this.callCostsSubscription.unsubscribe();\n    if (this.sumSuggestSubscription) this.sumSuggestSubscription.unsubscribe();\n  }\n}\n","<div class=\"home-block-coverage\">\n  <div class=\"card\">\n    <!-- <div class=\"card-body\">\n      <div class=\"card-title\">{{ package.description }}</div>\n      <div class=\"card-cuota\">12 cuotas de</div>\n      <div class=\"card-amount\">$3.300</div>\n      <div class=\"card-btn-select\">\n        <button type=\"button\" class=\"btn btn-primary\">\n          Seleccionar\n        </button>\n      </div>\n    </div> -->\n    <!-- <h1 *ngFor=\"let check of checkUncheckCoverage\">\n      {{ check.code }} {{ check.checked }}\n    </h1> -->\n    <ul class=\"list-group\">\n      <ng-container *ngFor=\"let coverage of availableCoveragesBenefits\">\n        <li\n          class=\"list-group-item item-benefits\"\n          *ngIf=\"coverage.visible\"\n          [ngClass]=\"{\n            'item-resize-benefits': !isCheckUncheckCoverage(coverage)\n          }\"\n        >\n          <ng-container *ngIf=\"coverage.available\">\n            <img\n              src=\"assets/icons/active.svg\"\n              class=\"rounded mx-auto d-block\"\n            />\n          </ng-container>\n          <ng-container *ngIf=\"!coverage.available\">\n            <img\n              src=\"assets/icons/inactive.svg\"\n              class=\"rounded mx-auto d-block\"\n            />\n          </ng-container>\n        </li>\n      </ng-container>\n    </ul>\n\n    <ul\n      class=\"list-group others\"\n      [ngClass]=\"{ 'd-none': !showOthersCoverages }\"\n    >\n      <ng-container *ngFor=\"let coverage of availableCoveragesOthers\">\n        <li\n          class=\"list-group-item\"\n          *ngIf=\"coverage.visible\"\n          [ngClass]=\"{\n            'item-resize-others': !isCheckUncheckCoverage(coverage, false)\n          }\"\n        >\n          <ng-container *ngIf=\"coverage.available\">\n            <img\n              src=\"assets/icons/active.svg\"\n              class=\"rounded mx-auto d-block\"\n            />\n          </ng-container>\n          <ng-container *ngIf=\"!coverage.available\">\n            <img\n              src=\"assets/icons/inactive.svg\"\n              class=\"rounded mx-auto d-block\"\n            />\n          </ng-container>\n        </li>\n      </ng-container>\n    </ul>\n\n    <ul\n      class=\"list-group premiums\"\n      [ngClass]=\"{\n        'd-none': !showPremiumsCoverages,\n        'premiums-without-others': !showOthersCoverages\n      }\"\n    >\n      <ng-container *ngFor=\"let coverage of availableCoveragesPremium\">\n        <li\n          class=\"list-group-item item-resize-premiums\"\n          *ngIf=\"coverage.visible\"\n        >\n          <ng-container *ngIf=\"coverage.available\">\n            <img\n              src=\"assets/icons/active.svg\"\n              class=\"rounded mx-auto d-block\"\n            />\n          </ng-container>\n          <ng-container *ngIf=\"!coverage.available\">\n            <img\n              src=\"assets/icons/inactive.svg\"\n              class=\"rounded mx-auto d-block\"\n            />\n          </ng-container>\n        </li>\n      </ng-container>\n    </ul>\n  </div>\n</div>\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\n\nimport { BaseComponent } from '@sura-platform/core';\nimport { IHomeCoverages, IHouse, IPolicy } from '@sura-platform/features';\nimport { HOME_CONF } from '../../../home.config';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport * as fromPolicy from '../../../../../state/policy';\nimport * as fromQuote from '../../../../quote/state';\nimport { ICoverage } from '@sura-platform/features/coverage';\n@Component({\n  selector: 'sxf-homeblockcoverage',\n  templateUrl: 'blockcoverage.component.html',\n  styleUrls: ['blockcoverage.component.scss']\n})\nexport class HomeBlockCoverageComponent extends BaseComponent\n  implements OnInit, OnDestroy {\n  /**\n   * Package to render\n   *\n   * @type {*}\n   * @memberof HomeBlockCoverageComponent\n   */\n  @Input() public package: any;\n\n  /**\n   * List items of coverages\n   *\n   * @type {IHomeCoverages[]}\n   * @memberof HomeBlockCoverageComponent\n   */\n  @Input() public listItems: IHomeCoverages[] = [];\n\n  /**\n   * If true show Others coverages\n   *\n   * @memberof HomeBlockCoverageComponent\n   */\n  @Input() showOthersCoverages = false;\n\n  /**\n   * If true show Premiums coverages\n   *\n   * @memberof HomeBlockCoverageComponent\n   */\n  @Input() showPremiumsCoverages = false;\n\n  @Input() checkUncheckCoverage: any[] = [];\n\n  /**\n   * Available coverages BlockOne for package\n   *\n   * @type {*}\n   * @memberof HomeBlockCoverageComponent\n   */\n  availableCoveragesBenefits: any = [];\n\n  /**\n   * Available coverages BlockThree for package\n   *\n   * @type {*}\n   * @memberof HomeBlockCoverageComponent\n   */\n  availableCoveragesPremium: any = [];\n\n  /**\n   * Available coverages BlockTwo for package\n   *\n   * @type {*}\n   * @memberof HomeBlockCoverageComponent\n   */\n  availableCoveragesOthers: any = [];\n\n  quoteHomeSubscription: Subscription = new Subscription();\n\n  /**\n   * Current house number\n   */\n  currentHome: number | null = 0;\n\n  /**\n   * All houses\n   */\n  houses: IHouse[] = <IHouse[]>{};\n\n  /**\n   * Current House of houses vector\n   */\n  currentHouse: IHouse = <IHouse>{};\n\n  policy: IPolicy = <IPolicy>{};\n\n  pckCoverageDefault: IHouse[] = <IHouse[]>{};\n\n  constructor(private storePolicy: Store<fromPolicy.State>) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.quoteHomeSubscription = combineLatest([\n      this.storePolicy.select(fromQuote.getQuoteHomeData),\n      this.storePolicy.select(fromPolicy.getPolicyData),\n      this.storePolicy.select(fromQuote.getCoverageDefault)\n    ]).subscribe(([homeData, policy, coverageDefault]) => {\n      //pckCoverageDefault, es porque los chulitos y X\n      //esten anclados a los default de cada paquete\n      //pero estos default no necesariamente van a la cotizacion\n      this.pckCoverageDefault = <IHouse[]>coverageDefault;\n      this.currentHome = homeData.activeHome;\n\n      const currentPckCov = this.pckCoverageDefault\n        ?.find((pc) => pc.number === this.currentHome)\n        ?.packages?.find((pg) => pg.code === this.package.code)?.coverages;\n\n      this.availableCoveragesBenefits = this.mergeCoverages(\n        this.listItems,\n        <ICoverage[]>currentPckCov,\n        HOME_CONF.codesBenefitsCoverages,\n        false\n      );\n\n      this.availableCoveragesPremium = this.mergeCoverages(\n        this.listItems,\n        <ICoverage[]>currentPckCov,\n        HOME_CONF.codesPlanPremiumsCoverages,\n        false\n      );\n\n      const coverageBenefitsPremium = HOME_CONF.codesPlanPremiumsCoverages.concat(\n        HOME_CONF.codesBenefitsCoverages\n      );\n\n      this.availableCoveragesOthers = this.mergeCoverages(\n        this.listItems,\n        <ICoverage[]>currentPckCov,\n        coverageBenefitsPremium,\n        true\n      );\n\n      this.policy = policy;\n      this.currentHouse = <IHouse>(\n        this.policy.home.dwellings.find((h) => h.number === this.currentHome)\n      );\n    });\n  }\n\n  mergeCoverages(\n    fullList: any[],\n    partialList: ICoverage[],\n    allowCodes?: string[],\n    others?: boolean\n  ) {\n    // Se genera un arreglo con las coberturas marcadas como\n    // disponible o no disponible para el paquete\n    // en fullList vienen todas las coberturas, en partialList vienen\n    // las coberturas disponibles para el paquete\n    const coverages: any[] = [];\n    fullList.forEach((item: any) => {\n      if (allowCodes?.includes(item.pattern.code) && !others) {\n        coverages.push(this.proccessCoverage(item, partialList));\n      }\n      if (others && !allowCodes?.includes(item.pattern.code)) {\n        coverages.push(this.proccessCoverage(item, partialList));\n      }\n    });\n    return coverages;\n  }\n\n  proccessCoverage(item: any, partialList: any[]) {\n    const coverageAvailable = {\n      available: false,\n      code: '',\n      description: '',\n      visible: true\n    };\n    const coverage = partialList.find(\n      (c: any) => item.pattern.code === c.pattern.code\n    );\n\n    if (coverage) {\n      coverageAvailable.available = true;\n      coverageAvailable.code = coverage.pattern.code;\n      coverageAvailable.description = coverage.pattern.description;\n      coverageAvailable.visible = !HOME_CONF.codesExcludeCoverages.includes(\n        coverageAvailable.code\n      );\n    } else {\n      coverageAvailable.available = false;\n      coverageAvailable.code = item.pattern.code;\n      coverageAvailable.description = item.pattern.description;\n      coverageAvailable.visible = !HOME_CONF.codesExcludeCoverages.includes(\n        coverageAvailable.code\n      );\n    }\n\n    return coverageAvailable;\n  }\n\n  isCheckUncheckCoverage(coverage: any, defaultReturn = true) {\n    const control = this.checkUncheckCoverage.find(\n      (ctl: any) => ctl.code === coverage.code\n    );\n    if (control) {\n      return control.checked;\n    } else {\n      return defaultReturn;\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","<div class=\"row mt-4 home-coverage\">\n  <div class=\"col-lg-12\">\n    <ng-container *ngIf=\"showMessageIncendio\">\n      <div class=\"row no-gutters\">\n        <div class=\"col-lg-10 offset-lg-1 block-alert\">\n          <label>\n            <img\n              class=\"color-alert\"\n              src=\"/assets/icons/GENERAL_ALERT.svg\"\n              alt=\"ok\"\n            />\n          </label>\n          <label class=\"title\">\n            Seleccioná al menos una cobertura de incendio para poder cotizar.\n          </label>\n        </div>\n      </div>\n    </ng-container>\n\n    <div class=\"row no-gutters\">\n      <div class=\"col-lg-5 home-list-coverage\">\n        <div\n          class=\"row no-gutters\"\n          style=\"margin-top: 5.1875rem; margin-bottom: 2.0625rem;\"\n        >\n          <div class=\"col-lg-12\" style=\"padding-left: 8.0625rem;\">\n            <div class=\"title\">Elegí el plan</div>\n            <div class=\"subtitle\">Coberturas incluídas</div>\n            <div class=\"gray-title\">\n              ¡Podes editarlas para armar tu plan a medida!\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-lg-6 home-block-coverage\">\n        <div class=\"row no-gutters\" style=\"margin-top: 4.0625rem;\">\n          <input type=\"hidden\" *ngIf=\"defaultValues$ | async\" />\n          <input type=\"hidden\" *ngIf=\"paymentPlan$ | async\" />\n          <ng-container *ngFor=\"let package of packages\">\n            <div class=\"col-lg-4 pr-3\">\n              <div class=\"card\">\n                <div class=\"card-body\">\n                  <div class=\"card-title\">{{ package.description }}</div>\n                  <div class=\"card-cuota\">\n                    <ng-container *ngIf=\"!loadingCost\">\n                      {{ paymentTerm.maximumnumberofinstallments }} cuotas de\n                    </ng-container>\n                  </div>\n                  <div class=\"card-amount\" *ngIf=\"!loadingCost\">\n                    ${{\n                      (getCostPck(package) ? getCostPck(package) : 0)\n                        | number: '1.0-0'\n                    }}\n                  </div>\n                  <div class=\"card-amount\" *ngIf=\"loadingCost\">\n                    <ng-lottie\n                      width=\"20%\"\n                      height=\"48px\"\n                      [options]=\"lottieConfig\"\n                    ></ng-lottie>\n                  </div>\n                  <div class=\"card-btn-select\">\n                    <button type=\"button\" class=\"btn btn-primary\">\n                      Seleccionar\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"row no-gutters\"\n      style=\"position: relative; max-height: 75vh;\"\n      [perfectScrollbar]=\"{ suppressScrollY: false }\"\n    >\n      <div class=\"col-lg-5\">\n        <sxf-homelistcoverage\n          *ngIf=\"!loadingList\"\n          [listItems]=\"listSumSuggests\"\n          (msgIncendio)=\"procesaPropagar($event)\"\n          (showOthersStatus)=\"processShowOthers($event)\"\n          (showPremiumsStatus)=\"processShowPremiums($event)\"\n          (checkUncheckCoverage)=\"processCheckUncheckCoverage($event)\"\n          (allowCost)=\"callCostFromList($event)\"\n          [loadingAdditionals]=\"loadingAdditionals\"\n          [isAllLoad]=\"isAllLoad\"\n        ></sxf-homelistcoverage>\n      </div>\n      <!-- Se deja una columna al extremo derecho -->\n      <div class=\"col-lg-6\">\n        <div class=\"row no-gutters\">\n          <ng-container *ngFor=\"let package of packages\">\n            <div class=\"col-lg-4 pr-3\">\n              <sxf-homeblockcoverage\n                [package]=\"package\"\n                [listItems]=\"listSumSuggests\"\n                [showOthersCoverages]=\"showOthersStatus\"\n                [showPremiumsCoverages]=\"showPremiumsStatus\"\n                [checkUncheckCoverage]=\"checkUncheckCoverage\"\n              ></sxf-homeblockcoverage>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<router-outlet></router-outlet>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\n\nimport {\n  combineLatest,\n  Subscription,\n  Observable,\n  of,\n  BehaviorSubject,\n  Subject\n} from 'rxjs';\nimport {\n  IHouse,\n  IPolicy,\n  IAmounts,\n  IHomeCoverages,\n  AditionalAccessoriesService,\n  IPackage,\n  ComissionService,\n  DiscountService,\n  IDiscount,\n  PeriodMethodService,\n  PaymentMethodService,\n  IPayment,\n  PaymentPlansService,\n  IPaymentPlan,\n  QuotingService,\n  ICost,\n  DefaultAssistanceService,\n  IDefaultAssistance\n} from '@sura-platform/features';\nimport { IRoutes } from '@sura-platform/web/core/models/question/routes.interface';\nimport * as fromQuote from '../../../quote/state';\nimport * as fromPolicy from '../../../../state/policy';\nimport { Store } from '@ngrx/store';\nimport { tap, switchMap } from 'rxjs/operators';\nimport { CoveragesAdapter } from '../../../../adapters/coverages.adapter';\nimport { HOME_CONF } from '../../home.config';\nimport * as fromQuoteActions from '../../../quote/state/quote.actions';\nimport * as fromPolicyActions from '../../../../state/policy/policy.actions';\nimport * as fromProducerReducer from '../../../../../producer/state/producer.reducer';\nimport * as fromProducer from '../../../../../producer/state';\nimport { IProducer } from '@sura-platform/features/producer';\nimport { PolicyAdapter } from '../../../../adapters/policy.adapter';\nimport { AnimationOptions } from 'ngx-lottie';\n@Component({\n  selector: 'sxf-homecoverage',\n  templateUrl: 'coverage.component.html',\n  styleUrls: ['coverage.component.scss']\n})\nexport class HomeCoverageComponent implements OnInit, OnDestroy {\n  quoteHomeSubscription: Subscription = new Subscription();\n\n  policySubscription: Subscription = new Subscription();\n\n  /**\n   * Current house numberimport * as fromQuote from '../../../quote/state';\nimport * as fromPolicy from '../../../../state/policy';\n   */\n  currentHome: number | null = 0;\n\n  /**\n   * Home routes\n   */\n  routes: IRoutes[] = <IRoutes[]>{};\n\n  /**\n   * All houses\n   */\n  houses: IHouse[] = <IHouse[]>{};\n\n  /**\n   * Current House of houses vector\n   */\n  currentHouse: IHouse = <IHouse>{};\n\n  /**\n   * Current policy\n   */\n  policy: IPolicy = <IPolicy>{};\n\n  /**\n   * true loading List Coverages\n   * false not loading List Coverages\n   *\n   * @memberof HomeCoverageComponent\n   */\n  loadingList = false;\n\n  /**\n   * true loading Packages CoveragesDiscountService\n  /**\n   * true loading Additionals\n   * false not loading Additionals\n   *\n   * @memberof HomeCoverageComponent\n   */\n  loadingAdditionals = true;\n\n  listCoverages: IAmounts = <IAmounts>{};\n  listSumSuggests: IHomeCoverages[] = <IHomeCoverages[]>{};\n\n  packages: any = <any>{};\n\n  sumSuggestedSubscription: Subscription = new Subscription();\n\n  showMessageIncendio = false;\n\n  /**\n   * Pass to blockcoverage to collapse Others coverages\n   *\n   * @memberof HomeCoverageComponent\n   */\n  showOthersStatus = false;\n\n  /**\n   * Pass to blockcoverage to collapse Premiums coverages\n   *\n   * @memberof HomeCoverageComponent\n   */\n  showPremiumsStatus = false;\n\n  /**\n   * Pass to blockcoverage to sync styles\n   *\n   * @memberof HomeCoverageComponent\n   */\n  checkUncheckCoverage: any[] = [];\n\n  /**\n   * variable for save defaultCommission in the store\n   */\n  defaultCommission: number | undefined;\n\n  /**\n   * variable for save defaultDiscount in the store\n   */\n  defaultDiscount: IDiscount[] = <IDiscount[]>{};\n\n  /**\n   * variable for save IPaymentMethod in the store\n   */\n  payment: IPayment = <IPayment>{};\n\n  /**\n   * variable for save IProducer in the store\n   */\n  currentProducer: IProducer = <IProducer>{};\n\n  /**\n   * Get payments plans from service and store it\n   */\n  paymentPlan$: Observable<IPaymentPlan[]> | undefined;\n\n  defaultValues$: Observable<any> | undefined;\n\n  resultCosts$ = new BehaviorSubject<any>(null);\n\n  costsResponseSubscription: Subscription = new Subscription();\n\n  loadingCost = true;\n\n  getCosts$ = new Subject<void>();\n\n  costsSubscription: Subscription = new Subscription();\n\n  isAllLoad = false;\n\n  isFormValid = false;\n\n  currentCost: ICost[] = <ICost[]>{};\n\n  costsQuoteSubscription: Subscription = new Subscription();\n\n  // Loadings\n  lottieConfig: AnimationOptions = {\n    path: '/assets/loadings/inside-inputs-loader.json'\n  };\n\n  paymentTermSubscription: Subscription = new Subscription();\n\n  paymentTerm: IPaymentPlan = <IPaymentPlan>{};\n\n  defaultAssistance: IDefaultAssistance = <IDefaultAssistance>{};\n\n  constructor(\n    private storeQuote: Store<fromQuote.State>,\n    private storePolicy: Store<fromPolicy.State>,\n    private coveragesAdapter: CoveragesAdapter,\n    private additionalService: AditionalAccessoriesService,\n    private comissionService: ComissionService,\n    private discountService: DiscountService,\n    private periodsMethodService: PeriodMethodService,\n    private paymentMethodService: PaymentMethodService,\n    private paymentPlansService: PaymentPlansService,\n    private producerStore: Store<fromProducerReducer.ProducerState>,\n    private quotingService: QuotingService,\n    private policyAdapter: PolicyAdapter,\n    private defaultAssistanceService: DefaultAssistanceService\n  ) {}\n\n  ngOnInit() {\n    this.loadingList = true;\n    this.policySubscription = combineLatest([\n      this.storePolicy.select(fromPolicy.getPolicyData),\n      this.storePolicy.select(fromQuote.getQuoteHomeActiveHome),\n      this.producerStore.select(fromProducer.getCurrentProducer)\n    ]).subscribe((dat: any) => {\n      this.currentProducer = <IProducer>dat[2];\n      this.policy = dat[0];\n      this.currentHome = dat[1];\n      const housePolicy = dat[0].home.dwellings.find(\n        (h: any) => h.number === this.currentHome\n      );\n      this.packages = housePolicy?.packages;\n    });\n\n    this.sumSuggestedSubscription = this.storePolicy\n      .select(fromQuote.getsuggestedSums)\n      .subscribe((sumSuggest) => {\n        this.listSumSuggests = <IHomeCoverages[]>sumSuggest?.coverages;\n        this.loadingList = false;\n      });\n\n    this.quoteHomeSubscription = combineLatest([\n      this.storePolicy.select(fromQuote.getQuoteHomeActiveHome),\n      this.storePolicy.select(fromQuote.getQuoteHomeRoutes),\n      this.storeQuote.select(fromPolicy.getHouses)\n    ])\n      .pipe(\n        tap(([homeActive, homeRoutes, houses]) => {\n          this.currentHome = homeActive;\n          this.routes = <IRoutes[]>homeRoutes;\n          this.houses = houses;\n          this.currentHouse = <IHouse>(\n            this.houses.find((h) => h.id === this.currentHome)\n          );\n        })\n      )\n      .subscribe(() => {\n        this.loadingList = false;\n      });\n\n    this.loadDefaultValues();\n\n    this.costsResponseSubscription = this.resultCosts$.subscribe((response) => {\n      if (response) {\n        this.storeQuote.dispatch(\n          new fromQuoteActions.SetCostsHomeResponseAction(response)\n        );\n      }\n    });\n\n    this.costsSubscription = this.getCosts$\n      .pipe(\n        switchMap(() =>\n          this.quotingService.getCosts(\n            this.policyAdapter.adaptHome(this.policy as IPolicy)\n          )\n        )\n      )\n      .subscribe((policy: IPolicy) => {\n        this.resultCosts$.next(policy);\n        this.loadingCost = false;\n      });\n\n    this.costsQuoteSubscription = this.storeQuote\n      .select(fromQuote.getHomeCosts)\n      .subscribe((costs) => {\n        this.currentCost = <ICost[]>costs;\n      });\n\n    this.paymentTermSubscription = this.storePolicy\n      .select(fromPolicy.getPaymentTerm)\n      .subscribe((data) => {\n        this.paymentTerm = data;\n      });\n  }\n\n  callCostFromList() {\n    this.isFormValid = true;\n    this.checkCall();\n  }\n\n  checkCall() {\n    if (this.isAllLoad && this.isFormValid) {\n      this.callCost();\n    }\n  }\n\n  callCost() {\n    this.loadingCost = true;\n    this.resultCosts$.next(null);\n    this.getCosts$.next();\n  }\n\n  loadDefaultValues() {\n    const reqComisions = {\n      job: { number: this.policy.job.number }\n    };\n\n    this.defaultValues$ = combineLatest([\n      this.discountService.getAllDiscounts(reqComisions),\n      this.comissionService.getAllComissions(reqComisions),\n      this.periodsMethodService.getAllPeriodMethods(reqComisions),\n      this.paymentMethodService.getAllPaymentMethods(this.policy.job),\n      this.defaultAssistanceService.getDefaultAssistance(\n        this.currentProducer.profile.channel,\n        this.currentProducer.code\n      )\n    ]).pipe(\n      tap(\n        ([discount, commission, period, paymentMethod, defaultAssistance]) => {\n          this.defaultAssistance = defaultAssistance;\n          this.loadAdditionals(HOME_CONF.callCoveragePackage);\n          this.defaultCommission = commission.default;\n          this.defaultDiscount = discount;\n          this.defaultDiscount[0].value = 0;\n\n          const creditCardOption = paymentMethod.filter((x) =>\n            x.code.toString().toLowerCase().includes('credit')\n          );\n\n          this.payment = {\n            ...this.payment,\n            method: creditCardOption[0].code.toString()\n          };\n\n          this.storePolicy.dispatch(\n            new fromPolicyActions.SetCurrentPaymentMethodAction(\n              <IPayment>this.payment\n            )\n          );\n\n          this.storePolicy.dispatch(\n            new fromPolicyActions.SetCurrentPeriodMethod(period[0])\n          );\n\n          this.storePolicy.dispatch(\n            new fromPolicyActions.SetCurrentDiscountAction(this.defaultDiscount)\n          );\n\n          this.storePolicy.dispatch(\n            new fromPolicyActions.SetCurrentCommissionAction(\n              this.defaultCommission\n            )\n          );\n\n          this.paymentPlan$ = this.paymentPlansService\n            .getAllPaymentPlans(\n              'ars',\n              creditCardOption[0].code,\n              this.currentProducer.code,\n              <string>this.policy?.period?.start?.toString(),\n              <string>this.policy?.period?.end?.toString()\n            )\n            .pipe(\n              switchMap((pm) => {\n                pm.map((pkg) => {\n                  const cuotas = pkg?.description\n                    ?.replace('Cuotas - ARS', '')\n                    ?.replace('Pago Total - ARS', '1')\n                    .trim();\n\n                  if (pkg !== null) {\n                    pkg.description = <string>cuotas;\n                  }\n                  return pkg;\n                });\n\n                this.storePolicy.dispatch(\n                  new fromPolicyActions.SetCurrentPaymentTermAction(\n                    pm[pm.length - 1]\n                  )\n                );\n\n                if (this.payment) {\n                  this.payment = {\n                    ...this.payment,\n                    plan: {\n                      ...this.payment.plan,\n                      code: pm[pm.length - 1].code\n                    }\n                  };\n\n                  this.storePolicy.dispatch(\n                    new fromPolicyActions.SetCurrentPaymentMethodAction(\n                      this.payment\n                    )\n                  );\n                }\n\n                return of(pm);\n              }),\n              tap(() => {\n                this.isAllLoad = true;\n                this.checkCall();\n              })\n            );\n        }\n      )\n    );\n  }\n\n  loadAdditionals(pkg: IPackage) {\n    this.loadingAdditionals = true;\n    const policy: IPolicy = this.coveragesAdapter.adaptAdditionalHome(\n      this.policy\n    );\n    if (policy.home.dwellings) {\n      let housePolicy: IHouse = <IHouse>{};\n      housePolicy = <IHouse>(\n        policy.home.dwellings.find((dw: any) => dw.number === this.currentHome)\n      );\n      if (housePolicy) housePolicy.package = <IPackage>pkg;\n\n      this.additionalService\n        .getAdditionalAccessorios(policy)\n        .subscribe((ad) => {\n          const coverageAdditional = ad.home.dwellings.find(\n            (dw: any) => dw.number === this.currentHome\n          ).package.coverages;\n\n          this.listSumSuggests.forEach((li) => {\n            const toCheckCode = coverageAdditional.find(\n              (cv: any) => cv.pattern.code === li.pattern.code\n            );\n            if (toCheckCode && toCheckCode?.terms[0]?.value?.max) {\n              li.terms[0].value.max = toCheckCode?.terms[0]?.value?.max;\n            } else {\n              li.terms[0].value.max = null;\n            }\n            if (toCheckCode && toCheckCode?.terms[0]?.value?.min) {\n              li.terms[0].value.min = toCheckCode?.terms[0]?.value?.min;\n            } else {\n              li.terms[0].value.min = null;\n            }\n          });\n\n          this.listCoverages.coverages = this.listSumSuggests;\n\n          this.storeQuote.dispatch(\n            new fromQuoteActions.SetSuggestedSumsAction(this.listCoverages)\n          );\n\n          let assistanceHome = coverageAdditional.find(\n            (cv: any) => cv.pattern.code === 'SURA_HOE_Asistencia'\n          );\n          const termsTemp: any[] = [];\n\n          termsTemp.push({\n            code: assistanceHome.terms[0].code,\n            options: assistanceHome.terms[0].options,\n            value: this.defaultAssistance.value\n          });\n          assistanceHome = {\n            ...assistanceHome,\n            terms: termsTemp\n          };\n          this.storeQuote.dispatch(\n            new fromQuoteActions.SetHomeAssistanceAction(assistanceHome)\n          );\n\n          this.loadingAdditionals = false;\n        });\n    }\n  }\n\n  procesaPropagar(value: boolean) {\n    this.showMessageIncendio = value;\n  }\n\n  processShowOthers(value: boolean) {\n    this.showOthersStatus = value;\n  }\n\n  processShowPremiums(value: boolean) {\n    this.showPremiumsStatus = value;\n  }\n\n  processCheckUncheckCoverage(value: any[]) {\n    this.checkUncheckCoverage = value;\n  }\n\n  getCostPck(currentPck: any) {\n    if (!this.loadingCost) {\n      const priceInvoice = this.currentCost?.find((cost) =>\n        cost.externalId\n          .split('&')\n          .includes(\n            `${this.policy.productcode},${this.currentHome},${currentPck.code}`\n          )\n      );\n      if (priceInvoice && priceInvoice.invoice) {\n        return priceInvoice.invoice;\n      }\n    }\n    return 0;\n  }\n\n  ngOnDestroy() {\n    if (this.quoteHomeSubscription) this.quoteHomeSubscription.unsubscribe();\n    if (this.policySubscription) this.policySubscription.unsubscribe();\n    if (this.sumSuggestedSubscription)\n      this.sumSuggestedSubscription.unsubscribe();\n    if (this.costsSubscription) this.costsSubscription.unsubscribe();\n    if (this.costsResponseSubscription)\n      this.costsResponseSubscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeCoverageComponent } from './coverage.component';\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeCoverageComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomeCoverageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HomeCoverageComponent } from './coverage.component';\nimport { HomeCoverageRoutingModule } from './coverage-routing.module';\nimport { SharedModule } from '../../../../../shared/shared.module';\nimport { HomeListCoverageComponent } from './listcoverage/listcoverage.component';\nimport { HomeBlockCoverageComponent } from './blockcoverage/blockcoverage.component';\n\n@NgModule({\n  imports: [CommonModule, SharedModule, HomeCoverageRoutingModule],\n  declarations: [\n    HomeCoverageComponent,\n    HomeListCoverageComponent,\n    HomeBlockCoverageComponent\n  ],\n  providers: []\n})\nexport class HomeCoverageModule {}\n"]}